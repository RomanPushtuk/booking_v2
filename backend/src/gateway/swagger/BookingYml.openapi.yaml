openapi: 3.1.0
info:
  title: BookingYml
  description: ''
  version: 1.0.0
tags:
  - name: public
  - name: auth
  - name: clients
  - name: hosts
  - name: admin
paths:
  /api/hosts:
    get:
      summary: GetHosts
      deprecated: false
      description: Get list of all available hosts
      operationId: PUBLIC_GET_HOSTS
      tags:
        - public
      parameters: []
      responses:
        '200':
          description: List of hosts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostDTO12'
              examples:
                '1':
                  summary: Success
                  value:
                    id: QfgtBGhO
                    forwardBooking: P3W
                    workHours:
                      - from: '09:00'
                        to: '13:00'
                      - from: '14:00'
                        to: '18:00'
                    workDays:
                      - MONDAY
                      - TUESDAY
                      - WEDNESDAY
                      - THURSDAY
                      - FRIDAY
                '2':
                  summary: Success
                  value:
                    id: XyzABC12
                    forwardBooking: P2W
                    workHours:
                      - from: '10:00'
                        to: '17:00'
                    workDays:
                      - MONDAY
                      - WEDNESDAY
                      - FRIDAY
          headers: {}
      security: []
  /api/hosts/{id}:
    get:
      summary: GetHostById
      deprecated: false
      description: Each user of the system can get information about the host
      operationId: PUBLIC_GET_HOST_BY_ID
      tags:
        - public
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostDTO12'
              example:
                id: QfgtBGhO
                forwardBooking: P3W
                workHours:
                  - from: '09:00'
                    to: '13:00'
                  - from: '14:00'
                    to: '18:00'
                workDays:
                  - MONDAY
                  - TUESDAY
                  - WEDNESDAY
                  - THURSDAY
                  - FRIDAY
          headers: {}
      security: []
  /api/hosts/{id}/bookings:
    get:
      summary: GetHostBookings
      deprecated: false
      description: >-
        Get host's bookings from now until the host's forward booking period.
        Shows occupied time slots for planning appointments.
      operationId: PUBLIC_GET_HOST_BOOKINGS
      tags:
        - public
      parameters:
        - name: id
          in: path
          description: Host ID
          required: true
          example: ''
          schema:
            type: string
        - name: sortDirection
          in: query
          description: Sort direction for bookings
          required: false
          example: ASC
          schema:
            type: string
            enum:
              - DESC
              - ASC
            default: ASC
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO711'
              examples:
                '1':
                  summary: Success
                  value:
                    id: W5yzHBnj
                    clientId: RHufHq84
                    hostId: DHhd82df
                    date: '2025-09-24'
                    time:
                      from: '09:00'
                      to: '11:30'
                '2':
                  summary: Success
                  value:
                    id: peYQTB5F
                    hostId: DHhd82df
                    date: '2025-09-29'
                    time:
                      from: '14:00'
                      to: '15:00'
          headers: {}
      security: []
  /api/auth/register:
    post:
      summary: Register
      deprecated: false
      description: Registering a new user in the system
      operationId: AUTH_REGISTER
      tags:
        - auth
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDTO'
            example:
              login: newuser123
              password: StrongPassword123!
              role: CLIENT
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoggedInDTO'
          headers: {}
      security: []
  /api/auth/login:
    post:
      summary: Login
      deprecated: false
      description: >
        Authenticate user and receive JWT token.


        **Important**: When using the returned token in other endpoints:

        - Copy the `access_token` from the response

        - Use it directly in the Authorization field (do not add 'Bearer '
        prefix)

        - Example: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
      operationId: AUTH_LOGIN
      tags:
        - auth
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUserDTO'
            example:
              login: client_test
              password: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoggedInDTO'
              example:
                access_token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsaWVudF90ZXN0Iiwicm9sZSI6IkNMSUVOVCIsImlhdCI6MTY0MDk5NTIwMH0.signature
          headers: {}
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    examples:
                      - Invalid login or password
          headers: {}
      security: []
  /api/clients/me:
    get:
      summary: GetMe
      deprecated: false
      description: Get current client information
      operationId: CLIENTS_GET_CLIENT
      tags:
        - clients
      parameters: []
      responses:
        '200':
          description: Client information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDTO2'
              example:
                id: client_123
                info:
                  firstName: John
                  lastName: Doe
          headers: {}
        '401':
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    examples:
                      - Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    examples:
                      - Access denied
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateMe
      deprecated: false
      description: Update current client information
      operationId: CLIENTS_UPDATE_CLIENT
      tags:
        - clients
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientDTO5'
            example:
              info:
                firstName: John
                lastName: Smith
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatedDTO'
              example:
                id: client_123
          headers: {}
        '400':
          description: Bad Request - Invalid input data
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: DeleteMe
      deprecated: false
      description: Mark current client as deleted from the system
      operationId: CLIENTS_DELETE_CLIENT
      tags:
        - clients
      parameters: []
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsedDeletedDTO'
              example:
                id: client_123
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
      security:
        - bearerAuth: []
  /api/clients/me/bookings:
    get:
      summary: GetMyBookings
      deprecated: false
      description: Get current client's bookings with filtering and sorting
      operationId: CLIENTS_GET_BOOKINGS
      tags:
        - clients
      parameters:
        - name: sortDirection
          in: query
          description: Sort direction for results
          required: false
          example: ASC
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: ASC
        - name: sortProperty
          in: query
          description: Property to sort by
          required: false
          example: fromDateTime
          schema:
            type: string
            default: fromDateTime
        - name: fromDateTime
          in: query
          description: Filter bookings that start after this time (ISO8601).
          required: false
          example: '2025-06-21T10:00:00Z'
          schema:
            type: string
            format: date-time
        - name: toDateTime
          in: query
          description: Filter bookings that end before this time (ISO8601).
          required: false
          example: '2025-06-28T18:00:00Z'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of client's bookings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO1'
              example:
                id: booking_789
                clientId: client_123
                hostId: host_456
                fromDateTime: '2025-06-25T10:00:00Z'
                toDateTime: '2025-06-25T11:00:00Z'
                info:
                  title: Consultation
                  description: Regular checkup
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
      security:
        - bearerAuth: []
    post:
      summary: CreateBooking
      deprecated: false
      description: Create a new booking for current client
      operationId: CLIENTS_CREATE_BOOKING
      tags:
        - clients
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingDTO3'
            example:
              hostId: host_456
              fromDateTime: '2025-06-25T10:00:00Z'
              toDateTime: '2025-06-25T11:00:00Z'
              info:
                title: Consultation
                description: Regular checkup
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreatedDTO'
              example:
                id: booking_789
          headers: {}
        '400':
          description: Bad Request - Invalid input data
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
        '409':
          description: Conflict - Time slot not available
          headers: {}
      security:
        - bearerAuth: []
  /api/clients/me/bookings/{bookingId}:
    get:
      summary: GetBookingById
      deprecated: false
      description: Get specific booking by ID for current client
      operationId: CLIENTS_GET_BOOKING_BY_ID
      tags:
        - clients
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to retrieve
          required: true
          example: booking_789
          schema:
            type: string
      responses:
        '200':
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO1'
              example:
                id: booking_789
                clientId: client_123
                hostId: host_456
                fromDateTime: '2025-06-25T10:00:00Z'
                toDateTime: '2025-06-25T11:00:00Z'
                info:
                  title: Consultation
                  description: Regular checkup
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
        '404':
          description: Booking not found or access denied
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateBooking
      deprecated: false
      description: Update specific booking for current client
      operationId: CLIENTS_UPDATE_BOOKING
      tags:
        - clients
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to update
          required: true
          example: booking_789
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookingDTO4'
            example:
              fromDateTime: '2025-06-25T14:00:00Z'
              toDateTime: '2025-06-25T15:00:00Z'
              info:
                title: Updated Consultation
                description: Updated description
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingUpdatedDTO'
              example:
                id: booking_789
          headers: {}
        '400':
          description: Bad Request - Invalid input data
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
        '404':
          description: Booking not found or access denied
          headers: {}
        '409':
          description: Conflict - Time slot not available
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: CancelBooking
      deprecated: false
      description: Cancel (soft delete) specific booking for current client
      operationId: CLIENTS_CANCEL_BOOKING
      tags:
        - clients
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to cancel
          required: true
          example: booking_789
          schema:
            type: string
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingUpdatedDTO'
              example:
                id: booking_789
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a client
          headers: {}
        '404':
          description: Booking not found or access denied
          headers: {}
      security:
        - bearerAuth: []
  /api/hosts/me:
    get:
      summary: GetMe
      deprecated: false
      description: Get information about the current host
      operationId: HOSTS_GET_ME
      tags:
        - hosts
      parameters: []
      responses:
        '200':
          description: Host information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostDTO6'
              example:
                id: qMzpUi3C
                forwardBooking: P3W
                workHours:
                  - from: '08:00'
                    to: '20:00'
                workDays:
                  - SUNDAY
                  - THURSDAY
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: DeleteMe
      deprecated: false
      description: Mark host as deleted
      operationId: HOSTS_DELETE_ME
      tags:
        - hosts
      parameters: []
      responses:
        '200':
          description: Host deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsedDeletedDTO'
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateMe
      deprecated: false
      description: Update host params
      operationId: HOSTS_UPDATE_ME
      tags:
        - hosts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHostDTO10'
            example:
              forwardBooking: P3W
              workHours:
                - from: '09:00'
                  to: '13:00'
                - from: '14:00'
                  to: '18:00'
              workDays:
                - MONDAY
                - TUESDAY
                - WEDNESDAY
                - THURSDAY
                - FRIDAY
      responses:
        '200':
          description: Host updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatedDTO'
          headers: {}
        '400':
          description: >-
            Bad Request - Invalid input data. Check forwardBooking format (ISO
            8601 duration) and workHours validation (time format, chronological
            order, no overlaps)
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
      security:
        - bearerAuth: []
  /api/hosts/me/bookings:
    post:
      summary: CreateBooking
      deprecated: false
      description: >
        Create a new booking as a host (administrative function).


        **Important:** The hostId in the request body will be IGNORED and
        automatically 

        set to the current authenticated user's ID. This is an administrative
        endpoint 

        where hosts create bookings for their clients.


        **Use cases:**

        - Medical receptionist booking patient appointments

        - Service provider scheduling client meetings  

        - Host creating appointments for existing clients


        **Note:** The hostId field is required in the request body for DTO
        validation,

        but its value is overridden by the current user's ID in the
        implementation.
      operationId: HOSTS_CREATE_BOOKING
      tags:
        - hosts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingDTO8'
            example:
              clientId: client_123
              hostId: ignored_will_be_overridden
              fromDateTime: '2025-06-25T10:00:00Z'
              toDateTime: '2025-06-25T11:00:00Z'
              info:
                title: Medical Consultation
                description: General health checkup and consultation
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreatedDTO'
              example:
                id: booking_456
          headers: {}
        '400':
          description: Bad Request - Invalid input data or time slot not available
          headers: {}
        '401':
          description: Unauthorized - Invalid or missing authentication token
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
        '404':
          description: Not Found - Client not found
          headers: {}
        '409':
          description: Conflict - Time slot already booked or outside working hours
          headers: {}
      security:
        - bearerAuth: []
    get:
      summary: GetMyBookings
      deprecated: false
      description: >-
        Get all bookings for the current host with optional filtering and
        sorting
      operationId: HOSTS_GET_MY_BOOKINGS
      tags:
        - hosts
      parameters:
        - name: clientId
          in: query
          description: Filter by client ID
          required: false
          schema:
            type: string
        - name: sortDirection
          in: query
          description: Sort direction
          required: false
          example: DESC
          schema:
            type: string
            enum:
              - DESC
              - ASC
            default: DESC
        - name: sortProperty
          in: query
          description: Property to sort by
          required: false
          example: fromDateTime
          schema:
            type: string
            default: fromDateTime
            enum:
              - fromDateTime
              - toDateTime
        - name: fromDateTime
          in: query
          description: Filter bookings from this date-time (ISO8601)
          required: false
          example: '2025-06-25T00:00:00Z'
          schema:
            type: string
            format: date-time
        - name: toDateTime
          in: query
          description: Filter bookings until this date-time (ISO8601)
          required: false
          example: '2025-06-30T23:59:59Z'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of host's bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO7'
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
      security:
        - bearerAuth: []
  /api/hosts/me/bookings/{bookingId}:
    get:
      summary: GetBookingById
      deprecated: false
      description: Get specific booking by ID for current host
      operationId: HOSTS_GET_BOOKING_BY_ID
      tags:
        - hosts
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to retrieve
          required: true
          example: booking_123
          schema:
            type: string
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO7'
              example:
                id: booking_123
                clientId: client_456
                hostId: host_789
                fromDateTime: '2025-06-25T10:00:00Z'
                toDateTime: '2025-06-25T11:00:00Z'
                info:
                  title: Consultation
                  description: Medical consultation
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
        '404':
          description: Booking not found
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: DeleteBooking
      deprecated: false
      description: Delete(cancel) booking
      operationId: HOSTS_DELETE_BOOKING
      tags:
        - hosts
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to delete
          required: true
          example: booking_123
          schema:
            type: string
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDeletedDTO'
              example:
                id: booking_123
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
        '404':
          description: Booking not found
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateBooking
      deprecated: false
      description: Update booking
      operationId: HOSTS_UPDATE_BOOKING
      tags:
        - hosts
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to update
          required: true
          example: booking_123
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookingDTO9'
            example:
              hostId: host_123
              fromDateTime: '2025-06-25T14:00:00Z'
              toDateTime: '2025-06-25T15:00:00Z'
              info:
                title: Updated Consultation
                description: Updated description
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDeletedDTO'
              example:
                id: booking_123
          headers: {}
        '400':
          description: Bad Request - Invalid input data
          headers: {}
        '401':
          description: Unauthorized
          headers: {}
        '403':
          description: Forbidden - User is not a host
          headers: {}
        '404':
          description: Booking not found
          headers: {}
      security:
        - bearerAuth: []
  /api/hosts/me/settings:
    get:
      summary: GetMySettings
      deprecated: false
      description: ''
      operationId: HOSTS_GET_HOST_SETTINGS
      tags:
        - hosts
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostSettingsDTO'
          headers: {}
      security: []
    patch:
      summary: UpdateSettings
      deprecated: false
      description: ''
      operationId: HOSTS_UPDATE_SETTINGS
      tags:
        - hosts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHostSettingsDTO'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
          headers: {}
      security: []
  /api/admin/clients:
    get:
      summary: GetClients
      deprecated: false
      description: Allows you to get all the clients created in the system
      operationId: ADMIN_GET_CLIENTS
      tags:
        - admin
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientDTO'
          headers: {}
      security:
        - bearerAuth: []
    post:
      summary: CreateClient
      deprecated: false
      description: Allows you to create a new client
      operationId: ADMIN_CREATE_NEW_CLIENT
      tags:
        - admin
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientDTO'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatedDTO'
          headers: {}
      security:
        - bearerAuth: []
  /api/admin/clients/{clientId}:
    get:
      summary: GetClientById
      deprecated: false
      description: Allows you to get a specific client by his id
      operationId: ADMIN_GET_CLIENT_BY_ID
      tags:
        - admin
      parameters:
        - name: clientId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDTO'
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateClient
      deprecated: false
      description: Allows you to update the client
      operationId: ADMIN_UPDATE_CLIETN
      tags:
        - admin
      parameters:
        - name: clientId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientDTO5'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatedDTO'
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: DeleteClient
      deprecated: false
      description: Allows you to delete a client
      operationId: ADMIN_DELETE_CLIENT
      tags:
        - admin
      parameters:
        - name: clientId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsedDeletedDTO'
          headers: {}
      security:
        - bearerAuth: []
  /api/admin/hosts:
    get:
      summary: GetHosts
      deprecated: false
      description: Allows you to get all the hosts
      operationId: ADMIN_GET_HOSTS
      tags:
        - admin
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostDTO'
          headers: {}
      security:
        - bearerAuth: []
    post:
      summary: CreateHost
      deprecated: false
      description: Allows you to create a new host
      operationId: ADMIN_CREATE_NEW_HOST
      tags:
        - admin
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHostDTO'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatedDTO'
          headers: {}
      security:
        - bearerAuth: []
  /api/admin/hosts/{hostId}:
    get:
      summary: GetHostById
      deprecated: false
      description: Allows you to get a host by its Id
      operationId: ADMIN_GET_HOST
      tags:
        - admin
      parameters:
        - name: hostId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostDTO'
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateHost
      deprecated: false
      description: Allows you to update the host
      operationId: ADMIN_UPDATE_HOST
      tags:
        - admin
      parameters:
        - name: hostId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHostDTO10'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatedDTO'
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: DeleteHost
      deprecated: false
      description: Allows you to delete a host
      operationId: ADMIN_DELETE_HOST
      tags:
        - admin
      parameters:
        - name: hostId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsedDeletedDTO'
          headers: {}
      security:
        - bearerAuth: []
  /api/admin/bookings:
    get:
      summary: GetBookings
      deprecated: false
      description: Allows you to get all the booklets created in the system
      operationId: ADMIN_GET_BOOKINGS
      tags:
        - admin
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO'
          headers: {}
      security:
        - bearerAuth: []
    post:
      summary: CreateBooking
      deprecated: false
      description: Allow create a new booking
      operationId: ADMIN_CREATE_NEW_BOOKING
      tags:
        - admin
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingDTO'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreatedDTO'
          headers: {}
      security:
        - bearerAuth: []
  /api/admin/bookings/{bookingId}:
    get:
      summary: GetBookingById
      deprecated: false
      description: Get a booking by his Id
      operationId: ADMIN_GET_BOOKING
      tags:
        - admin
      parameters:
        - name: bookingId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO'
          headers: {}
      security:
        - bearerAuth: []
    patch:
      summary: UpdateBooking
      deprecated: false
      description: Allows you to update the booking by its id
      operationId: ADMIN_UPDATE_BOOKING
      tags:
        - admin
      parameters:
        - name: bookingId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookingDTO'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingUpdatedDTO'
          headers: {}
      security:
        - bearerAuth: []
    delete:
      summary: DeleteBooking
      deprecated: false
      description: Allows you to delete a booking by its Id
      operationId: ADMIN_DELETE_BOOKING
      tags:
        - admin
      parameters:
        - name: bookingId
          in: path
          description: ''
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDeletedDTO'
          headers: {}
      security:
        - bearerAuth: []
webhooks: {}
components:
  schemas:
    CreateBookingDTO:
      type: object
      properties:
        clientId:
          type: string
        hostId:
          type: string
          description: ID of the host to book
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - hostId
        - fromDateTime
        - toDateTime
        - clientId
      title: Admin_CreateBookingDTO
      examples:
        - hostId: host_456
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Consultation
            description: Regular checkup
    CreateClientDTO:
      type: object
      properties:
        login:
          type: string
          description: User login (max 36 characters)
        password:
          type: string
          description: Strong password
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Host's first name
            lastName:
              type: string
              description: Host's last name
          required:
            - firstName
            - lastName
          description: Additional information that can be attached to the client
      required:
        - login
        - password
      title: Admin_CreateClientDTO
    CreateHostDTO:
      type: object
      properties:
        login:
          type: string
          description: User login (max 36 characters)
        password:
          type: string
          description: Strong password
        forwardBooking:
          type: string
        workHours:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
              to:
                type: string
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Host's first name
            lastName:
              type: string
              description: Host's last name
          required:
            - firstName
            - lastName
          description: Additional information that can be attached to the host
      required:
        - forwardBooking
        - workHours
        - workDays
        - login
        - password
      title: Admin_CreateHostDTO
    UpdateBookingDTO:
      type: object
      properties:
        clientId:
          type: string
          description: Id of the client
        hostId:
          type: string
          description: Id of the host
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      title: Admin_UpdateBookingDTO
      examples:
        - hostId: host_456
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Consultation
            description: Regular checkup
    UpdateClientDTO:
      type: object
      properties:
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Updated first name
            lastName:
              type: string
              description: Updated last name
          required:
            - firstName
            - lastName
      title: Admin_UpdateClientDTO
      examples:
        - info:
            firstName: John
            lastName: Smith
    UpdateHostDTO:
      type: object
      properties:
        forwardBooking:
          type: string
          description: >-
            How far forward recording is allowed. ISO 8601 duration format
            (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
          pattern: >-
            ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
          examples:
            - P1W
        workHours:
          type: array
          description: >-
            Array of working time intervals. Each interval must have valid time
            format (HH:MM), chronological order (from < to), and no overlapping
            periods.
          items:
            type: object
            properties:
              from:
                type: string
                description: Start time in HH:MM format (24-hour)
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '09:00'
              to:
                type: string
                description: >-
                  End time in HH:MM format (24-hour). Must be later than 'from'
                  time.
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '17:00'
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
      title: Admin_UpdateHostDTO
      examples:
        - forwardBooking: P3W
          workHours:
            - from: '09:00'
              to: '13:00'
            - from: '14:00'
              to: '18:00'
          workDays:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
    BookingDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
        clientId:
          type: string
        hostId:
          type: string
          description: ID of the host to book
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - hostId
        - fromDateTime
        - toDateTime
        - clientId
        - id
      title: Admin_BookingDTO
      examples:
        - hostId: host_456
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Consultation
            description: Regular checkup
    HostDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
        forwardBooking:
          type: string
          description: >-
            How far forward recording is allowed. ISO 8601 duration format
            (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
          pattern: >-
            ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
          examples:
            - P1W
        workHours:
          type: array
          description: >-
            Array of working time intervals. Each interval must have valid time
            format (HH:MM), chronological order (from < to), and no overlapping
            periods.
          items:
            type: object
            properties:
              from:
                type: string
                description: Start time in HH:MM format (24-hour)
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '09:00'
              to:
                type: string
                description: >-
                  End time in HH:MM format (24-hour). Must be later than 'from'
                  time.
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '18:00'
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          description: Business days for the host
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Host's first name
            lastName:
              type: string
              description: Host's last name
          required:
            - firstName
            - lastName
          description: Additional information that can be attached to the host
      required:
        - id
        - forwardBooking
        - workHours
        - workDays
      title: Admin_HostDTO
      examples:
        - id: host_123
          forwardBooking: P3W
          workHours:
            - from: '09:00'
              to: '13:00'
            - from: '14:00'
              to: '18:00'
          workDays:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
          info:
            firstName: Dr. John
            lastName: Smith
    ClientDTO:
      type: object
      properties:
        id:
          type: string
          description: Client ID
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Client's first name
            lastName:
              type: string
              description: Client's last name
      required:
        - id
      title: Admin_ClientDTO
      examples:
        - id: client_123
          info:
            firstName: John
            lastName: Doe
    BookingDTO1:
      type: object
      properties:
        id:
          type: string
          description: Booking ID
        clientId:
          type: string
          description: Client ID who made the booking
        hostId:
          type: string
          description: Host ID providing the service
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - id
        - clientId
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Clients_BookingDTO
      examples:
        - id: booking_789
          clientId: client_123
          hostId: host_456
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Consultation
            description: Regular checkup
    ClientDTO2:
      type: object
      properties:
        id:
          type: string
          description: Client ID
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Client's first name
            lastName:
              type: string
              description: Client's last name
      required:
        - id
      title: Clients_ClientDTO
      examples:
        - id: client_123
          info:
            firstName: John
            lastName: Doe
    CreateBookingDTO3:
      type: object
      properties:
        hostId:
          type: string
          description: ID of the host to book
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Clients_CreateBookingDTO
      examples:
        - hostId: host_456
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Consultation
            description: Regular checkup
    UpdateBookingDTO4:
      type: object
      properties:
        fromDateTime:
          type: string
          format: date-time
          description: New booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: New booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Updated booking title
            description:
              type: string
              description: Updated booking description
      title: Clients_UpdateBookingDTO
      examples:
        - fromDateTime: '2025-06-25T14:00:00Z'
          toDateTime: '2025-06-25T15:00:00Z'
          info:
            title: Updated Consultation
            description: Updated description
    UpdateClientDTO5:
      type: object
      properties:
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Updated first name
            lastName:
              type: string
              description: Updated last name
      title: Clients_UpdateClientDTO
      examples:
        - info:
            firstName: John
            lastName: Smith
    HostDTO6:
      type: object
      properties:
        id:
          type: string
          description: ID
        forwardBooking:
          type: string
          description: >-
            How far forward recording is allowed. ISO 8601 duration format
            (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
          pattern: >-
            ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
          examples:
            - P1W
        workHours:
          type: array
          description: >-
            Array of working time intervals. Each interval must have valid time
            format (HH:MM), chronological order (from < to), and no overlapping
            periods.
          items:
            type: object
            properties:
              from:
                type: string
                description: Start time in HH:MM format (24-hour)
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '09:00'
              to:
                type: string
                description: >-
                  End time in HH:MM format (24-hour). Must be later than 'from'
                  time.
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '18:00'
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          description: Business days for the host
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Host's first name
            lastName:
              type: string
              description: Host's last name
          required:
            - firstName
            - lastName
          description: Additional information that can be attached to the host
      required:
        - id
        - forwardBooking
        - workHours
        - workDays
      title: Hosts_HostDTO
      examples:
        - id: host_123
          forwardBooking: P3W
          workHours:
            - from: '09:00'
              to: '13:00'
            - from: '14:00'
              to: '18:00'
          workDays:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
          info:
            firstName: Dr. John
            lastName: Smith
    BookingDTO7:
      type: object
      properties:
        id:
          type: string
          description: Booking ID
        clientId:
          type: string
          description: Client ID
        hostId:
          type: string
          description: Host ID
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - id
        - clientId
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Hosts_BookingDTO
      examples:
        - id: booking_123
          clientId: client_456
          hostId: host_789
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Consultation
            description: Medical consultation
    CreateBookingDTO8:
      type: object
      properties:
        clientId:
          type: string
          description: |
            ID of the client for whom the booking is being created.
            This client must exist in the system.
          maxLength: 36
          examples:
            - client_123
        hostId:
          type: string
          description: >
            **IMPORTANT:** This field is required for DTO validation but its
            value is IGNORED.

            The actual hostId will be automatically set to the current
            authenticated user's ID.


            TODO: Consider removing this field from DTO or making it optional to
            better reflect the actual behavior.
          maxLength: 36
          examples:
            - any_value_will_be_ignored
        fromDateTime:
          type: string
          format: date-time
          description: |
            Booking start time in ISO8601 format.
            Must be within host's working hours and available time slots.
          examples:
            - '2025-06-25T10:00:00Z'
        toDateTime:
          type: string
          format: date-time
          description: |
            Booking end time in ISO8601 format.
            Must be after fromDateTime and within host's working hours.
          examples:
            - '2025-06-25T11:00:00Z'
        info:
          type: object
          description: Additional information about the booking/service
          properties:
            title:
              type: string
              description: Title or name of the service/appointment
              examples:
                - Medical Consultation
            description:
              type: string
              description: Detailed description of the service or special notes
              examples:
                - General health checkup and consultation with Dr. Smith
          required:
            - title
            - description
      required:
        - clientId
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Hosts_CreateBookingDTO
      description: >
        Data required to create a booking as a host.


        **Note:** The hostId field is required in the schema but is ignored in
        implementation.

        The actual hostId is taken from the authenticated user's token.


        **TODO:** This DTO is shared between HostController and ClientController
        with different behaviors:

        - HostController: ignores hostId, uses currentUser.id as hostId

        - ClientController: uses hostId from request, ignores clientId and uses
        currentUser.id as clientId


        Consider creating separate DTOs for each use case to improve API
        clarity.
      examples:
        - clientId: client_123
          hostId: ignored_value
          fromDateTime: '2025-06-25T10:00:00Z'
          toDateTime: '2025-06-25T11:00:00Z'
          info:
            title: Medical Consultation
            description: General health checkup and consultation
    UpdateBookingDTO9:
      type: object
      properties:
        hostId:
          type: string
          description: ID of the host (only hosts can change this)
        fromDateTime:
          type: string
          format: date-time
          description: New booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: New booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Updated booking title
            description:
              type: string
              description: Updated booking description
      title: Hosts_UpdateBookingDTO
      examples:
        - hostId: host_123
          fromDateTime: '2025-06-25T14:00:00Z'
          toDateTime: '2025-06-25T15:00:00Z'
          info:
            title: Updated Consultation
            description: Updated description
    UpdateHostDTO10:
      type: object
      properties:
        forwardBooking:
          type: string
          description: >-
            How far forward recording is allowed. ISO 8601 duration format
            (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
          pattern: >-
            ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
          examples:
            - P1W
        workHours:
          type: array
          description: >-
            Array of working time intervals. Each interval must have valid time
            format (HH:MM), chronological order (from < to), and no overlapping
            periods.
          items:
            type: object
            properties:
              from:
                type: string
                description: Start time in HH:MM format (24-hour)
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '09:00'
              to:
                type: string
                description: >-
                  End time in HH:MM format (24-hour). Must be later than 'from'
                  time.
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '17:00'
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
      title: Hosts_UpdateHostDTO
      examples:
        - forwardBooking: P3W
          workHours:
            - from: '09:00'
              to: '13:00'
            - from: '14:00'
              to: '18:00'
          workDays:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
    BookingCreatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Shared_BookingCreatedDTO
      required:
        - id
    BookingUpdatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Shared_BookingUpdatedDTO
      required:
        - id
    BookingDeletedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Shared_BookingDeletedDTO
      required:
        - id
    UserCreatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Shared_UserCreatedDTO
      required:
        - id
    UserUpdatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Shared_UserUpdatedDTO
      required:
        - id
    UsedDeletedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Shared_UserDeletedDTO
      required:
        - id
    AuthUserDTO:
      type: object
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
      required:
        - login
        - password
      title: Auth_LogInUserDTO
      examples:
        - login: user123
          password: StrongPassword123!
    CreateUserDTO:
      type: object
      properties:
        login:
          type: string
          description: User login (max 36 characters)
          maxLength: 36
        password:
          type: string
          description: Strong password
        role:
          type: string
          enum:
            - CLIENT
            - HOST
          description: User role
      required:
        - login
        - password
        - role
      title: Auth_CreateUserDTO
      examples:
        - login: newuser123
          password: StrongPassword123!
          role: CLIENT
    UserLoggedInDTO:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        role:
          type: string
          enum:
            - CLIENT
            - HOST
            - ADMIN
      required:
        - accessToken
        - role
      title: Auth_UserLoggedInDTO
      examples:
        - accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    BookingDTO711:
      type: object
      properties:
        id:
          type: string
          description: ID
        clientId:
          type: string
          description: >-
            The ID will be visible only to the client who created the booking,
            the rest will receive an empty value.
        hostId:
          type: string
        date:
          type: string
          description: YYYY-MM-DD
        time:
          type: object
          properties:
            from:
              type: string
              description: HH:mm
            to:
              type: string
              description: HH:mm
          required:
            - from
            - to
      required:
        - id
        - hostId
        - date
        - time
      title: Public_BookingDTO
    HostDTO12:
      type: object
      properties:
        id:
          type: string
          description: ID
        forwardBooking:
          type: string
          description: >-
            How far forward recording is allowed. ISO 8601 duration format
            (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
          pattern: >-
            ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
          examples:
            - P1W
        workHours:
          type: array
          description: >-
            Array of working time intervals. Each interval must have valid time
            format (HH:MM), chronological order (from < to), and no overlapping
            periods.
          items:
            type: object
            properties:
              from:
                type: string
                description: Start time in HH:MM format (24-hour)
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '09:00'
              to:
                type: string
                description: >-
                  End time in HH:MM format (24-hour). Must be later than 'from'
                  time.
                pattern: ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
                examples:
                  - '18:00'
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
          description: Business days for the host
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Host's first name
            lastName:
              type: string
              description: Host's last name
          required:
            - firstName
            - lastName
          description: Additional information that can be attached to the host
      required:
        - id
        - forwardBooking
        - workHours
        - workDays
      title: Public_HostDTO
      examples:
        - id: host_123
          forwardBooking: P3W
          workHours:
            - from: '09:00'
              to: '13:00'
            - from: '14:00'
              to: '18:00'
          workDays:
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
          info:
            firstName: Dr. John
            lastName: Smith
    HostSettingsDTO:
      type: object
      properties:
        allowOverlappingBookings:
          type: boolean
          default: false
        allowPastTimeBookings:
          type: boolean
          default: false
        allowBookingCancelByClient:
          type: boolean
          default: true
        allowBookingCancelByHost:
          type: boolean
          default: true
        allowBookingUpdateByClient:
          type: boolean
          default: false
        allowBookingUpdateByHost:
          type: boolean
          default: false
        allowBookingApprove:
          type: boolean
          default: false
      required:
        - allowOverlappingBookings
        - allowPastTimeBookings
        - allowBookingCancelByClient
        - allowBookingCancelByHost
        - allowBookingUpdateByClient
        - allowBookingUpdateByHost
        - allowBookingApprove
      title: Hosts_HostSettingsDTO
    UpdateHostSettingsDTO:
      type: object
      properties:
        allowOverlappingBookings:
          type: boolean
        allowPastTimeBookings:
          type: boolean
        allowBookingCancelByClient:
          type: boolean
        allowBookingCancelByHost:
          type: boolean
        allowBookingUpdateByClient:
          type: boolean
        allowBookingUpdateByHost:
          type: boolean
        allowBookingApprove:
          type: boolean
      title: Hosts_UpdateHostSettingsDTO
  securitySchemes:
    bearerAuth:
      type: apiKey
      in: header
      name: Authorization
      description: >-
        JWT token authentication. Use the token returned from /auth/login
        endpoint. Do not include 'Bearer ' prefix.
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: http://localhost:80/api
    description: Production server
security: []
