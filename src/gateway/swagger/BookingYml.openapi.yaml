openapi: 3.0.1
info:
  title: BookingYml
  description: ""
  version: 1.0.0
tags:
  - name: public
  - name: auth
  - name: clients
  - name: hosts
paths:
  /hosts/{id}:
    get:
      summary: GetHostById
      deprecated: false
      description: Each user of the system can get information about the host
      operationId: PUBLIC_GET_HOST_BY_ID
      tags:
        - public
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema: &ref_0
                $ref: "#/components/schemas/HostDTO"
              example:
                id: QfgtBGhO
                forwardBooking: 3 weeks
                workHours:
                  - from: "09:00"
                    to: "13:00"
                  - from: "14:00"
                    to: "18:00"
                workDays:
                  - MONDAY
                  - TUESDAY
                  - WEDNESDAY
                  - THURSDAY
                  - FRIDAY
          headers: {}
      security: []
  /hosts/{id}/bookings:
    get:
      summary: GetHostBookings
      deprecated: false
      description: >-
        Each user of the system can see the host records without specifying the
        clients.
      operationId: PUBLIC_GET_HOST_BOOKINGS
      tags:
        - public
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: sortDirection
          in: query
          description: ""
          required: false
          example: DESC
          schema:
            type: string
            enum:
              - DESC
              - ASC
            default: DESC
        - name: sortProperty
          in: query
          description: ""
          required: false
          example: dateFrom
          schema:
            type: string
            default: dateFrom
            enum:
              - dateFrom
              - dateTo
              - timeFrom
              - timeTo
        - name: dateFrom
          in: query
          description: YYYY-MM-DD
          required: false
          example: 22-01-2025
          schema:
            type: string
        - name: dateTo
          in: query
          description: YYYY-MM-DD
          required: false
          example: 28-01-2025
          schema:
            type: string
        - name: timeFrom
          in: query
          description: HH:mm
          required: false
          example: "08:00"
          schema:
            type: string
            default: "00:00"
        - name: timeto
          in: query
          description: HH:mm
          required: false
          example: "23:59"
          schema:
            type: string
            default: "23:59"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingDTO7"
              example:
                - id: W5yzHBnj
                  clientId: RHufHq84
                  hostId: DHhd82df
                  date: "2025-09-24"
                  time:
                    from: "09:00"
                    to: "11:30"
                - id: peYQTB5F
                  hostId: DHhd82df
                  date: "2025-09-29"
                  time:
                    from: "14:00"
                    to: "15:00"
          headers: {}
      security: []
  /auth/register:
    post:
      summary: Register
      deprecated: false
      description: Registering a new user in the system
      operationId: AUTH_REGISTER
      tags:
        - auth
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreatedDTO"
          headers: {}
      security: []
  /auth/login:
    post:
      summary: Login
      deprecated: false
      description: |
        Authenticate user and receive JWT token.

        **Important**: When using the returned token in other endpoints:
        - Copy the `access_token` from the response
        - Use it directly in the Authorization field (do not add 'Bearer ' prefix)
        - Example: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...`
      operationId: AUTH_LOGIN
      tags:
        - auth
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUserDTO"
            example:
              login: "client_test"
              password: "password123"
      responses:
        "200":
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthorizedDTO"
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsaWVudF90ZXN0Iiwicm9sZSI6IkNMSUVOVCIsImlhdCI6MTY0MDk5NTIwMH0.signature"
                message: "Login successful"
          headers: {}
        "401":
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid login or password"
      security: []
  /clients/me:
    get:
      summary: GetMe
      deprecated: false
      description: Get current client information
      operationId: CLIENTS_GET_CLIENT
      tags:
        - clients
      parameters: []
      responses:
        "200":
          description: Client information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientDTO"
              example:
                id: "client_123"
                info:
                  firstName: "John"
                  lastName: "Doe"
          headers: {}
        "401":
          description: Unauthorized - Invalid or missing JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        "403":
          description: Forbidden - User is not a client
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Access denied"
      security:
        - bearerAuth: []
    patch:
      summary: UpdateMe
      deprecated: false
      description: Update current client information
      operationId: CLIENTS_UPDATE_CLIENT
      tags:
        - clients
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientDTO"
            example:
              info:
                firstName: "John"
                lastName: "Smith"
      responses:
        "200":
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientUpdatedDTO"
              example:
                id: "client_123"
          headers: {}
        "400":
          description: Bad Request - Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
      security:
        - bearerAuth: []
    delete:
      summary: DeleteMe
      deprecated: false
      description: Mark current client as deleted from the system
      operationId: CLIENTS_DELETE_CLIENT
      tags:
        - clients
      parameters: []
      responses:
        "200":
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientDeletedDTO"
              example:
                id: "client_123"
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
      security:
        - bearerAuth: []
  /clients/me/bookings:
    get:
      summary: GetMyBookings
      deprecated: false
      description: Get current client's bookings with filtering and sorting
      operationId: CLIENTS_GET_BOOKINGS
      tags:
        - clients
      parameters:
        - name: sortDirection
          in: query
          required: false
          description: Sort direction for results
          example: DESC
          schema:
            type: string
            enum:
              - ASC
              - DESC
            default: DESC
        - name: sortProperty
          in: query
          description: Property to sort by
          required: false
          example: fromDateTime
          schema:
            type: string
            default: fromDateTime
        - name: fromDateTime
          in: query
          description: Filter bookings with exact fromDateTime match (ISO8601)
          required: false
          example: "2025-06-21T10:00:00Z"
          schema:
            type: string
            format: date-time
        - name: toDateTime
          in: query
          description: Filter bookings with exact toDateTime match (ISO8601)
          required: false
          example: "2025-06-28T18:00:00Z"
          schema:
            type: string
            format: date-time
        - name: fromDateTimeStart
          in: query
          description: Filter bookings with fromDateTime >= this value (ISO8601)
          required: false
          example: "2025-06-01T00:00:00Z"
          schema:
            type: string
            format: date-time
        - name: fromDateTimeEnd
          in: query
          description: Filter bookings with fromDateTime <= this value (ISO8601)
          required: false
          example: "2025-06-30T23:59:59Z"
          schema:
            type: string
            format: date-time
        - name: toDateTimeStart
          in: query
          description: Filter bookings with toDateTime >= this value (ISO8601)
          required: false
          example: "2025-06-01T00:00:00Z"
          schema:
            type: string
            format: date-time
        - name: toDateTimeEnd
          in: query
          description: Filter bookings with toDateTime <= this value (ISO8601)
          required: false
          example: "2025-06-30T23:59:59Z"
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of client's bookings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingDTO"
              example:
                - id: "booking_789"
                  clientId: "client_123"
                  hostId: "host_456"
                  fromDateTime: "2025-06-25T10:00:00Z"
                  toDateTime: "2025-06-25T11:00:00Z"
                  info:
                    title: "Consultation"
                    description: "Regular checkup"
          headers: {}
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
      security:
        - bearerAuth: []
    post:
      summary: CreateBooking
      deprecated: false
      description: Create a new booking for current client
      operationId: CLIENTS_CREATE_BOOKING
      tags:
        - clients
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookingDTO"
            example:
              hostId: "host_456"
              fromDateTime: "2025-06-25T10:00:00Z"
              toDateTime: "2025-06-25T11:00:00Z"
              info:
                title: "Consultation"
                description: "Regular checkup"
      responses:
        "201":
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingCreatedDTO"
              example:
                id: "booking_789"
          headers: {}
        "400":
          description: Bad Request - Invalid input data
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
        "409":
          description: Conflict - Time slot not available
      security:
        - bearerAuth: []
  /clients/me/bookings/{bookingId}:
    get:
      summary: GetBookingById
      deprecated: false
      description: Get specific booking by ID for current client
      operationId: CLIENTS_GET_BOOKING_BY_ID
      tags:
        - clients
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to retrieve
          required: true
          schema:
            type: string
          example: "booking_789"
      responses:
        "200":
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDTO"
              example:
                id: "booking_789"
                clientId: "client_123"
                hostId: "host_456"
                fromDateTime: "2025-06-25T10:00:00Z"
                toDateTime: "2025-06-25T11:00:00Z"
                info:
                  title: "Consultation"
                  description: "Regular checkup"
          headers: {}
        "404":
          description: Booking not found or access denied
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
      security:
        - bearerAuth: []
    patch:
      summary: UpdateBooking
      deprecated: false
      description: Update specific booking for current client
      operationId: CLIENTS_UPDATE_BOOKING
      tags:
        - clients
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to update
          required: true
          schema:
            type: string
          example: "booking_789"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientUpdateBookingDTO"
            example:
              fromDateTime: "2025-06-25T14:00:00Z"
              toDateTime: "2025-06-25T15:00:00Z"
              info:
                title: "Updated Consultation"
                description: "Updated description"
      responses:
        "200":
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingUpdatedDTO"
              example:
                id: "booking_789"
          headers: {}
        "400":
          description: Bad Request - Invalid input data
        "404":
          description: Booking not found or access denied
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
        "409":
          description: Conflict - Time slot not available
      security:
        - bearerAuth: []
    delete:
      summary: CancelBooking
      deprecated: false
      description: Cancel (soft delete) specific booking for current client
      operationId: CLIENTS_CANCEL_BOOKING
      tags:
        - clients
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking to cancel
          required: true
          schema:
            type: string
          example: "booking_789"
      responses:
        "200":
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDeletedDTO"
              example:
                id: "booking_789"
          headers: {}
        "404":
          description: Booking not found or access denied
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - User is not a client
      security:
        - bearerAuth: []
  /hosts/me:
    get:
      summary: GetMe
      deprecated: false
      description: Get information about the current host
      operationId: HOSTS_GET_ME
      tags:
        - hosts
      parameters: []
      responses:
        "200":
          description: "Host information"
          content:
            application/json:
              schema: *ref_0
              example:
                id: qMzpUi3C
                forwardBooking: 3 weeks
                workHours:
                  - from: "08:00"
                    to: "20:00"
                workDays:
                  - SUNDAY
                  - THURSDAY
          headers: {}
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
      security:
        - bearerAuth: []
    delete:
      summary: DeleteMe
      deprecated: false
      description: Mark host as deleted
      operationId: HOSTS_DELETE_ME
      tags:
        - hosts
      parameters: []
      responses:
        "200":
          description: "Host deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostDeletedDTO"
          headers: {}
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
      security:
        - bearerAuth: []
    patch:
      summary: UpdateMe
      deprecated: false
      description: Update host params
      operationId: HOSTS_UPDATE_ME
      tags:
        - hosts
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateHostDTO"
      responses:
        "200":
          description: "Host updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostUpdatedDTO"
          headers: {}
        "400":
          description: "Bad Request - Invalid input data"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
      security:
        - bearerAuth: []
  /hosts/me/bookings:
    post:
      summary: CreateBooking
      deprecated: false
      description: |
        Create a new booking as a host (administrative function).

        **Important:** The hostId in the request body will be IGNORED and automatically 
        set to the current authenticated user's ID. This is an administrative endpoint 
        where hosts create bookings for their clients.

        **Use cases:**
        - Medical receptionist booking patient appointments
        - Service provider scheduling client meetings  
        - Host creating appointments for existing clients

        **Note:** The hostId field is required in the request body for DTO validation,
        but its value is overridden by the current user's ID in the implementation.
      operationId: HOSTS_CREATE_BOOKING
      tags:
        - hosts
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookingDTO3"
            example:
              clientId: "client_123"
              hostId: "ignored_will_be_overridden"
              fromDateTime: "2025-06-25T10:00:00Z"
              toDateTime: "2025-06-25T11:00:00Z"
              info:
                title: "Medical Consultation"
                description: "General health checkup and consultation"
      responses:
        "201":
          description: "Booking created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingCreatedDTO4"
              example:
                id: "booking_456"
          headers: {}
        "400":
          description: "Bad Request - Invalid input data or time slot not available"
        "401":
          description: "Unauthorized - Invalid or missing authentication token"
        "403":
          description: "Forbidden - User is not a host"
        "404":
          description: "Not Found - Client not found"
        "409":
          description: "Conflict - Time slot already booked or outside working hours"
      security:
        - bearerAuth: []
    get:
      summary: GetMyBookings
      deprecated: false
      description: "Get all bookings for the current host with optional filtering and sorting"
      operationId: HOSTS_GET_MY_BOOKINGS
      tags:
        - hosts
      parameters:
        - name: clientId
          in: query
          description: "Filter by client ID"
          required: false
          schema:
            type: string
        - name: sortDirection
          in: query
          description: "Sort direction"
          required: false
          example: DESC
          schema:
            type: string
            enum:
              - DESC
              - ASC
            default: DESC
        - name: sortProperty
          in: query
          description: "Property to sort by"
          required: false
          example: fromDateTime
          schema:
            type: string
            default: fromDateTime
            enum:
              - fromDateTime
              - toDateTime
        - name: fromDateTime
          in: query
          description: "Filter bookings from this date-time (ISO8601)"
          required: false
          example: "2025-06-25T00:00:00Z"
          schema:
            type: string
            format: date-time
        - name: toDateTime
          in: query
          description: "Filter bookings until this date-time (ISO8601)"
          required: false
          example: "2025-06-30T23:59:59Z"
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: "List of host's bookings"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BookingDTO1"
          headers: {}
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
      security:
        - bearerAuth: []
  /hosts/me/bookings/{bookingId}:
    get:
      summary: GetBookingById
      deprecated: false
      description: "Get specific booking by ID for current host"
      operationId: HOSTS_GET_BOOKING_BY_ID
      tags:
        - hosts
      parameters:
        - name: bookingId
          in: path
          description: "ID of the booking to retrieve"
          required: true
          schema:
            type: string
          example: "booking_123"
      responses:
        "200":
          description: "Booking details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDTO1"
              example:
                id: "booking_123"
                clientId: "client_456"
                hostId: "host_789"
                fromDateTime: "2025-06-25T10:00:00Z"
                toDateTime: "2025-06-25T11:00:00Z"
                info:
                  title: "Consultation"
                  description: "Medical consultation"
          headers: {}
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
        "404":
          description: "Booking not found"
      security:
        - bearerAuth: []
    delete:
      summary: DeleteBooking
      deprecated: false
      description: Delete(cancel) booking
      operationId: HOSTS_DELETE_BOOKING
      tags:
        - hosts
      parameters:
        - name: bookingId
          in: path
          description: "ID of the booking to delete"
          required: true
          schema:
            type: string
          example: "booking_123"
      responses:
        "200":
          description: "Booking deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDeletedDTO2"
              example:
                id: "booking_123"
          headers: {}
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
        "404":
          description: "Booking not found"
      security:
        - bearerAuth: []
    patch:
      summary: UpdateBooking
      deprecated: false
      description: Update booking
      operationId: HOSTS_UPDATE_BOOKING
      tags:
        - hosts
      parameters:
        - name: bookingId
          in: path
          description: "ID of the booking to update"
          required: true
          schema:
            type: string
          example: "booking_123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBookingDTO"
      responses:
        "200":
          description: "Booking updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingUpdatedDTO3"
              example:
                id: "booking_123"
          headers: {}
        "400":
          description: "Bad Request - Invalid input data"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden - User is not a host"
        "404":
          description: "Booking not found"
      security:
        - bearerAuth: []
  /hosts/me/settings:
    get:
      summary: GetMySettings
      deprecated: false
      description: ""
      operationId: HOSTS_GET_HOST_SETTINGS
      tags:
        - hosts
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HostSettingsDTO"
          headers: {}
      security: []
    patch:
      summary: UpdateSettings
      deprecated: false
      description: ""
      operationId: HOSTS_UPDATE_SETTIGNS
      tags:
        - hosts
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateHostSettingsDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
          headers: {}
      security: []
components:
  schemas:
    AuthUserDTO:
      type: object
      properties:
        login:
          type: string
          description: User login
        password:
          type: string
          description: User password
      required:
        - login
        - password
      title: Auth_LogInUserDTO
      example:
        login: "user123"
        password: "StrongPassword123!"
    CreateUserDTO:
      type: object
      properties:
        login:
          type: string
          description: User login (max 36 characters)
          maxLength: 36
        password:
          type: string
          description: Strong password
        role:
          type: string
          enum:
            - CLIENT
            - HOST
          description: User role
      required:
        - login
        - password
        - role
      title: Auth_CreateUserDTO
      example:
        login: "newuser123"
        password: "StrongPassword123!"
        role: "CLIENT"
    UserCreatedDTO:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
      required:
        - accessToken
      title: Auth_UserLoggedInDTO
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    UserAuthorizedDTO:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
      required:
        - accessToken
      title: Auth_UserLoggedInDTO
      example:
        accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ClientDTO:
      type: object
      properties:
        id:
          type: string
          description: Client ID
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Client's first name
            lastName:
              type: string
              description: Client's last name
      required:
        - id
      title: Clients_ClientDTO
      example:
        id: "client_123"
        info:
          firstName: "John"
          lastName: "Doe"
    BookingDTO:
      type: object
      properties:
        id:
          type: string
          description: Booking ID
        clientId:
          type: string
          description: Client ID who made the booking
        hostId:
          type: string
          description: Host ID providing the service
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - id
        - clientId
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Clients_BookingDTO
      example:
        id: "booking_789"
        clientId: "client_123"
        hostId: "host_456"
        fromDateTime: "2025-06-25T10:00:00Z"
        toDateTime: "2025-06-25T11:00:00Z"
        info:
          title: "Consultation"
          description: "Regular checkup"
    CreateBookingDTO:
      type: object
      properties:
        hostId:
          type: string
          description: ID of the host to book
        fromDateTime:
          type: string
          format: date-time
          description: Booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: Booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Booking title
            description:
              type: string
              description: Booking description
          required:
            - title
            - description
      required:
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Clients_CreateBookingDTO
      example:
        hostId: "host_456"
        fromDateTime: "2025-06-25T10:00:00Z"
        toDateTime: "2025-06-25T11:00:00Z"
        info:
          title: "Consultation"
          description: "Regular checkup"
    BookingCreatedDTO:
      type: object
      properties:
        id:
          type: string
      required:
        - id
      title: Clients_BookingCreatedDTO
    ClientDeletedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID of deleted client
      required:
        - id
      title: Clients_ClientDeletedDTO
      example:
        id: "client_123"
    ClientUpdatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID of updated client
      required:
        - id
      title: Clients_ClientUpdatedDTO
      example:
        id: "client_123"
    UpdateClientDTO:
      type: object
      properties:
        info:
          type: object
          properties:
            firstName:
              type: string
              description: Updated first name
            lastName:
              type: string
              description: Updated last name
      title: Clients_UpdateClientDTO
      example:
        info:
          firstName: "John"
          lastName: "Smith"
    BookingDeletedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      required:
        - id
      title: Clients_BookingDeletedDTO
    ClientUpdateBookingDTO:
      type: object
      properties:
        fromDateTime:
          type: string
          format: date-time
          description: New booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: New booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Updated booking title
            description:
              type: string
              description: Updated booking description
      title: Clients_ClientUpdateBookingDTO
      example:
        fromDateTime: "2025-06-25T14:00:00Z"
        toDateTime: "2025-06-25T15:00:00Z"
        info:
          title: "Updated Consultation"
          description: "Updated description"
    UpdateBookingDTO:
      type: object
      properties:
        hostId:
          type: string
          description: ID of the host (only hosts can change this)
        fromDateTime:
          type: string
          format: date-time
          description: New booking start time (ISO8601)
        toDateTime:
          type: string
          format: date-time
          description: New booking end time (ISO8601)
        info:
          type: object
          properties:
            title:
              type: string
              description: Updated booking title
            description:
              type: string
              description: Updated booking description
      title: Hosts_UpdateBookingDTO
      example:
        hostId: "host_123"
        fromDateTime: "2025-06-25T14:00:00Z"
        toDateTime: "2025-06-25T15:00:00Z"
        info:
          title: "Updated Consultation"
          description: "Updated description"
    BookingUpdatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Clients_BookingUpdatedDTO
      required:
        - id
    HostDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
        forwardBooking:
          type: string
          description: "How far forward recording is allowed. Example: 1 week, 3 days."
        workHours:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
                description: "Example: 09:00"
              to:
                type: string
                description: "Example: 18:00"
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
      required:
        - id
        - forwardBooking
        - workHours
        - workDays
      title: Hosts_HostDTO
    BookingDTO1:
      type: object
      properties:
        id:
          type: string
          description: "Booking ID"
        clientId:
          type: string
          description: "Client ID"
        hostId:
          type: string
          description: "Host ID"
        fromDateTime:
          type: string
          format: date-time
          description: "Booking start time (ISO8601)"
        toDateTime:
          type: string
          format: date-time
          description: "Booking end time (ISO8601)"
        info:
          type: object
          properties:
            title:
              type: string
              description: "Booking title"
            description:
              type: string
              description: "Booking description"
          required:
            - title
            - description
      required:
        - id
        - clientId
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Hosts_BookingDTO
      example:
        id: "booking_123"
        clientId: "client_456"
        hostId: "host_789"
        fromDateTime: "2025-06-25T10:00:00Z"
        toDateTime: "2025-06-25T11:00:00Z"
        info:
          title: "Consultation"
          description: "Medical consultation"
    HostDeletedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      required:
        - id
      title: Hosts_HostDeletedDTO
    UpdateHostDTO:
      type: object
      properties:
        workHours:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
              to:
                type: string
            required:
              - from
              - to
        workDays:
          type: array
          items:
            type: string
            enum:
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
              - SUNDAY
      title: Hosts_UpdateHostDTO
    HostUpdatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID
      required:
        - id
      title: Hosts_HostUpdatedDTO
    BookingDeletedDTO2:
      type: object
      properties:
        id:
          type: string
          description: ID
      required:
        - id
      title: Hosts_BookingDeletedDTO
    CreateBookingDTO3:
      type: object
      properties:
        clientId:
          type: string
          description: |
            ID of the client for whom the booking is being created.
            This client must exist in the system.
          maxLength: 36
          example: "client_123"
        hostId:
          type: string
          description: |
            **IMPORTANT:** This field is required for DTO validation but its value is IGNORED.
            The actual hostId will be automatically set to the current authenticated user's ID.

            TODO: Consider removing this field from DTO or making it optional to better reflect the actual behavior.
          maxLength: 36
          example: "any_value_will_be_ignored"
        fromDateTime:
          type: string
          format: date-time
          description: |
            Booking start time in ISO8601 format.
            Must be within host's working hours and available time slots.
          example: "2025-06-25T10:00:00Z"
        toDateTime:
          type: string
          format: date-time
          description: |
            Booking end time in ISO8601 format.
            Must be after fromDateTime and within host's working hours.
          example: "2025-06-25T11:00:00Z"
        info:
          type: object
          description: Additional information about the booking/service
          properties:
            title:
              type: string
              description: Title or name of the service/appointment
              example: "Medical Consultation"
            description:
              type: string
              description: Detailed description of the service or special notes
              example: "General health checkup and consultation with Dr. Smith"
          required:
            - title
            - description
      required:
        - clientId
        - hostId
        - fromDateTime
        - toDateTime
        - info
      title: Hosts_CreateBookingDTO
      description: |
        Data required to create a booking as a host.

        **Note:** The hostId field is required in the schema but is ignored in implementation.
        The actual hostId is taken from the authenticated user's token.

        **TODO:** This DTO is shared between HostController and ClientController with different behaviors:
        - HostController: ignores hostId, uses currentUser.id as hostId
        - ClientController: uses hostId from request, ignores clientId and uses currentUser.id as clientId

        Consider creating separate DTOs for each use case to improve API clarity.
      example:
        clientId: "client_123"
        hostId: "ignored_value"
        fromDateTime: "2025-06-25T10:00:00Z"
        toDateTime: "2025-06-25T11:00:00Z"
        info:
          title: "Medical Consultation"
          description: "General health checkup and consultation"
    BookingCreatedDTO4:
      type: object
      properties:
        id:
          type: string
          description: ID
      required:
        - id
      title: Hosts_BookingCreatedDTO
    UpdateBookingDTO5:
      type: object
      properties:
        clientId:
          type: string
        date:
          type: string
        timeFrom:
          type: string
        timeTo:
          type: string
          description: >-
            It can be optional, then the standard recording duration will be 30
            min.
      title: Hosts_UpdateBookingDTO
      required:
        - clientId
    BookingUpdatedDTO6:
      type: object
      properties:
        id:
          type: string
          description: ID
      title: Hosts_BookingUpdatedDTO
      required:
        - id
    BookingDTO7:
      type: object
      properties:
        id:
          type: string
          description: ID
        clientId:
          type: string
          description: >-
            The ID will be visible only to the client who created the booking,
            the rest will receive an empty value.
        hostId:
          type: string
        date:
          type: string
          description: YYYY-MM-DD
        time:
          type: object
          properties:
            from:
              type: string
              description: HH:mm
            to:
              type: string
              description: HH:mm
          required:
            - from
            - to
      required:
        - id
        - hostId
        - date
        - time
      title: Public_BookingDTO
    HostSettingsDTO:
      type: object
      properties:
        allowOverlapingBookings:
          type: boolean
          default: false
        allowPastTimeBookings:
          type: boolean
          default: false
        allowBookingСancelByClient:
          type: boolean
          default: true
        allowBookingСancelByHost:
          type: boolean
          default: true
        allowBookingUpdateByClient:
          type: boolean
          default: false
        allowBookingUpdateByHost:
          type: boolean
          default: false
        allowBookingApprove:
          type: boolean
          default: false
      required:
        - allowOverlapingBookings
        - allowPastTimeBookings
        - allowBookingСancelByClient
        - allowBookingСancelByHost
        - allowBookingUpdateByClient
        - allowBookingUpdateByHost
        - allowBookingApprove
      title: Hosts_HostSettingsDTO
    UpdateHostSettingsDTO:
      type: object
      properties:
        allowOverlapingBookings:
          type: boolean
        allowPastTimeBookings:
          type: boolean
        allowBookingСancelByClient:
          type: boolean
        allowBookingСancelByHost:
          type: boolean
        allowBookingUpdateByClient:
          type: boolean
        allowBookingUpdateByHost:
          type: boolean
        allowBookingApprove:
          type: boolean
      title: Hosts_UpdateHostSettingsDTO
  securitySchemes:
    bearerAuth:
      type: apiKey
      in: header
      name: Authorization
      description: JWT token authentication. Use the token returned from /auth/login endpoint. Do not include 'Bearer ' prefix.
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.booking.example.com
    description: Production server
