/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
/**
 * @example {"login":"user123","password":"StrongPassword123!"}
 */
export type AuthUserDTO = {
  /**
   * User login
   */
  login: string;
  /**
   * User password
   */
  password: string;
};

/**
 * @example {"login":"newuser123","password":"StrongPassword123!","role":"CLIENT"}
 */
export type CreateUserDTO = {
  /**
   * User login (max 36 characters)
   *
   * @maxLength 36
   */
  login: string;
  /**
   * Strong password
   */
  password: string;
  /**
   * User role
   */
  role: "CLIENT" | "HOST";
};

/**
 * @example {"accessToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}
 */
export type UserCreatedDTO = {
  /**
   * JWT access token
   */
  accessToken: string;
};

/**
 * @example {"accessToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}
 */
export type UserAuthorizedDTO = {
  /**
   * JWT access token
   */
  accessToken: string;
};

/**
 * @example {"id":"client_123","info":{"firstName":"John","lastName":"Doe"}}
 */
export type ClientDTO = {
  /**
   * Client ID
   */
  id: string;
  info?: {
    /**
     * Client's first name
     */
    firstName?: string;
    /**
     * Client's last name
     */
    lastName?: string;
  };
};

/**
 * @example {"id":"booking_789","clientId":"client_123","hostId":"host_456","fromDateTime":"2025-06-25T10:00:00Z","toDateTime":"2025-06-25T11:00:00Z","info":{"title":"Consultation","description":"Regular checkup"}}
 */
export type BookingDTO = {
  /**
   * Booking ID
   */
  id: string;
  /**
   * Client ID who made the booking
   */
  clientId: string;
  /**
   * Host ID providing the service
   */
  hostId: string;
  /**
   * Booking start time (ISO8601)
   *
   * @format date-time
   */
  fromDateTime: string;
  /**
   * Booking end time (ISO8601)
   *
   * @format date-time
   */
  toDateTime: string;
  info: {
    /**
     * Booking title
     */
    title: string;
    /**
     * Booking description
     */
    description: string;
  };
};

/**
 * @example {"hostId":"host_456","fromDateTime":"2025-06-25T10:00:00Z","toDateTime":"2025-06-25T11:00:00Z","info":{"title":"Consultation","description":"Regular checkup"}}
 */
export type CreateClientBookingDTO = {
  /**
   * ID of the host to book
   */
  hostId: string;
  /**
   * Booking start time (ISO8601)
   *
   * @format date-time
   */
  fromDateTime: string;
  /**
   * Booking end time (ISO8601)
   *
   * @format date-time
   */
  toDateTime: string;
  info: {
    /**
     * Booking title
     */
    title: string;
    /**
     * Booking description
     */
    description: string;
  };
};

export type BookingCreatedDTO = {
  id: string;
};

/**
 * @example {"id":"client_123"}
 */
export type ClientDeletedDTO = {
  /**
   * ID of deleted client
   */
  id: string;
};

/**
 * @example {"id":"client_123"}
 */
export type ClientUpdatedDTO = {
  /**
   * ID of updated client
   */
  id: string;
};

/**
 * @example {"info":{"firstName":"John","lastName":"Smith"}}
 */
export type UpdateClientDTO = {
  info?: {
    /**
     * Updated first name
     */
    firstName?: string;
    /**
     * Updated last name
     */
    lastName?: string;
  };
};

export type BookingDeletedDTO = {
  /**
   * ID
   */
  id: string;
};

/**
 * @example {"fromDateTime":"2025-06-25T14:00:00Z","toDateTime":"2025-06-25T15:00:00Z","info":{"title":"Updated Consultation","description":"Updated description"}}
 */
export type UpdateClientBookingDTO = {
  /**
   * New booking start time (ISO8601)
   *
   * @format date-time
   */
  fromDateTime?: string;
  /**
   * New booking end time (ISO8601)
   *
   * @format date-time
   */
  toDateTime?: string;
  info?: {
    /**
     * Updated booking title
     */
    title?: string;
    /**
     * Updated booking description
     */
    description?: string;
  };
};

/**
 * @example {"hostId":"host_123","fromDateTime":"2025-06-25T14:00:00Z","toDateTime":"2025-06-25T15:00:00Z","info":{"title":"Updated Consultation","description":"Updated description"}}
 */
export type UpdateBookingDTO = {
  /**
   * ID of the host (only hosts can change this)
   */
  hostId?: string;
  /**
   * New booking start time (ISO8601)
   *
   * @format date-time
   */
  fromDateTime?: string;
  /**
   * New booking end time (ISO8601)
   *
   * @format date-time
   */
  toDateTime?: string;
  info?: {
    /**
     * Updated booking title
     */
    title?: string;
    /**
     * Updated booking description
     */
    description?: string;
  };
};

export type BookingUpdatedDTO = {
  /**
   * ID
   */
  id: string;
};

/**
 * @example {"id":"host_123","forwardBooking":"P3W","workHours":[{"from":"09:00","to":"13:00"},{"from":"14:00","to":"18:00"}],"workDays":["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY"],"info":{"firstName":"Dr. John","lastName":"Smith"}}
 */
export type HostDTO = {
  /**
   * ID
   */
  id: string;
  /**
   * How far forward recording is allowed. ISO 8601 duration format (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
   *
   * @pattern ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
   * @example P1W
   */
  forwardBooking: string;
  /**
   * Array of working time intervals. Each interval must have valid time format (HH:MM), chronological order (from < to), and no overlapping periods.
   */
  workHours: {
    /**
     * Start time in HH:MM format (24-hour)
     *
     * @pattern ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
     * @example 09:00
     */
    from: string;
    /**
     * End time in HH:MM format (24-hour). Must be later than 'from' time.
     *
     * @pattern ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
     * @example 18:00
     */
    to: string;
  }[];
  workDays: (
    | "MONDAY"
    | "TUESDAY"
    | "WEDNESDAY"
    | "THURSDAY"
    | "FRIDAY"
    | "SATURDAY"
    | "SUNDAY"
  )[];
  info?: {
    /**
     * Host's first name
     */
    firstName?: string;
    /**
     * Host's last name
     */
    lastName?: string;
  };
};

/**
 * @example {"id":"booking_123","clientId":"client_456","hostId":"host_789","fromDateTime":"2025-06-25T10:00:00Z","toDateTime":"2025-06-25T11:00:00Z","info":{"title":"Consultation","description":"Medical consultation"}}
 */
export type BookingDTO1 = {
  /**
   * Booking ID
   */
  id: string;
  /**
   * Client ID
   */
  clientId: string;
  /**
   * Host ID
   */
  hostId: string;
  /**
   * Booking start time (ISO8601)
   *
   * @format date-time
   */
  fromDateTime: string;
  /**
   * Booking end time (ISO8601)
   *
   * @format date-time
   */
  toDateTime: string;
  info: {
    /**
     * Booking title
     */
    title: string;
    /**
     * Booking description
     */
    description: string;
  };
};

export type HostDeletedDTO = {
  /**
   * ID
   */
  id: string;
};

/**
 * @example {"forwardBooking":"P3W","workHours":[{"from":"09:00","to":"13:00"},{"from":"14:00","to":"18:00"}],"workDays":["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY"]}
 */
export type UpdateHostDTO = {
  /**
   * How far forward recording is allowed. ISO 8601 duration format (e.g., P1D, P1W, P1M, P1Y, PT1H). Must be a valid ISO 8601 duration.
   *
   * @pattern ^P(?:[0-9]+Y)?(?:[0-9]+M)?(?:[0-9]+D)?(?:T(?:[0-9]+H)?(?:[0-9]+M)?(?:[0-9]+(?:\.[0-9]+)?S)?)?$
   * @example P1W
   */
  forwardBooking?: string;
  /**
   * Array of working time intervals. Each interval must have valid time format (HH:MM), chronological order (from < to), and no overlapping periods.
   */
  workHours?: {
    /**
     * Start time in HH:MM format (24-hour)
     *
     * @pattern ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
     * @example 09:00
     */
    from: string;
    /**
     * End time in HH:MM format (24-hour). Must be later than 'from' time.
     *
     * @pattern ^([0-1][0-9]|2[0-3]):[0-5][0-9]$
     * @example 17:00
     */
    to: string;
  }[];
  workDays?: (
    | "MONDAY"
    | "TUESDAY"
    | "WEDNESDAY"
    | "THURSDAY"
    | "FRIDAY"
    | "SATURDAY"
    | "SUNDAY"
  )[];
};

export type HostUpdatedDTO = {
  /**
   * ID
   */
  id: string;
};

export type BookingDeletedDTO2 = {
  /**
   * ID
   */
  id: string;
};

/**
 * Data required to create a booking as a host.
 *
 * **Note:** The hostId field is required in the schema but is ignored in implementation.
 * The actual hostId is taken from the authenticated user's token.
 *
 * **TODO:** This DTO is shared between HostController and ClientController with different behaviors:
 * - HostController: ignores hostId, uses currentUser.id as hostId
 * - ClientController: uses hostId from request, ignores clientId and uses currentUser.id as clientId
 *
 * Consider creating separate DTOs for each use case to improve API clarity.
 *
 * @example {"clientId":"client_123","hostId":"ignored_value","fromDateTime":"2025-06-25T10:00:00Z","toDateTime":"2025-06-25T11:00:00Z","info":{"title":"Medical Consultation","description":"General health checkup and consultation"}}
 */
export type CreateBookingDTO3 = {
  /**
   * ID of the client for whom the booking is being created.
   * This client must exist in the system.
   *
   * @maxLength 36
   * @example client_123
   */
  clientId: string;
  /**
   * **IMPORTANT:** This field is required for DTO validation but its value is IGNORED.
   * The actual hostId will be automatically set to the current authenticated user's ID.
   *
   * TODO: Consider removing this field from DTO or making it optional to better reflect the actual behavior.
   *
   * @maxLength 36
   * @example any_value_will_be_ignored
   */
  hostId: string;
  /**
   * Booking start time in ISO8601 format.
   * Must be within host's working hours and available time slots.
   *
   * @format date-time
   * @example 2025-06-25T10:00:00Z
   */
  fromDateTime: string;
  /**
   * Booking end time in ISO8601 format.
   * Must be after fromDateTime and within host's working hours.
   *
   * @format date-time
   * @example 2025-06-25T11:00:00Z
   */
  toDateTime: string;
  /**
   * Additional information about the booking/service
   */
  info: {
    /**
     * Title or name of the service/appointment
     *
     * @example Medical Consultation
     */
    title: string;
    /**
     * Detailed description of the service or special notes
     *
     * @example General health checkup and consultation with Dr. Smith
     */
    description: string;
  };
};

export type BookingCreatedDTO4 = {
  /**
   * ID
   */
  id: string;
};

export type UpdateBookingDTO5 = {
  clientId: string;
  date?: string;
  timeFrom?: string;
  /**
   * It can be optional, then the standard recording duration will be 30 min.
   */
  timeTo?: string;
};

export type BookingUpdatedDTO6 = {
  /**
   * ID
   */
  id: string;
};

export type BookingDTO7 = {
  /**
   * ID
   */
  id: string;
  /**
   * The ID will be visible only to the client who created the booking, the rest will receive an empty value.
   */
  clientId?: string;
  hostId: string;
  /**
   * YYYY-MM-DD
   */
  date: string;
  time: {
    /**
     * HH:mm
     */
    from: string;
    /**
     * HH:mm
     */
    to: string;
  };
};

export type HostSettingsDTO = {
  /**
   * @default false
   */
  allowOverlappingBookings: boolean;
  /**
   * @default false
   */
  allowPastTimeBookings: boolean;
  /**
   * @default true
   */
  allowBookingCancelByClient: boolean;
  /**
   * @default true
   */
  allowBookingCancelByHost: boolean;
  /**
   * @default false
   */
  allowBookingUpdateByClient: boolean;
  /**
   * @default false
   */
  allowBookingUpdateByHost: boolean;
  /**
   * @default false
   */
  allowBookingApprove: boolean;
};

export type UpdateHostSettingsDTO = {
  allowOverlappingBookings?: boolean;
  allowPastTimeBookings?: boolean;
  allowBookingCancelByClient?: boolean;
  allowBookingCancelByHost?: boolean;
  allowBookingUpdateByClient?: boolean;
  allowBookingUpdateByHost?: boolean;
  allowBookingApprove?: boolean;
};
